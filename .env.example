# Application
SERVER_PORT=8080

# Security - Vendor Auth Server (M2M OAuth2)
# The vendor-auth-server runs on port 9000 and provides M2M authentication
# using OAuth2 Client Credentials flow with JWT tokens
JWT_ISSUER_URI=http://localhost:9000
# or provide JWKS directly
JWT_JWK_SET_URI=http://localhost:9000/oauth2/jwks
# Optional audience validation (recommended)
APP_JWT_AUDIENCE=vendor-data-service

# M2M Client Credentials (for testing - use environment variables in production)
# Default client in vendor-auth-server:
#   Client ID: m2m-client
#   Client Secret: m2m-secret
#   Token URL: http://localhost:9000/oauth2/token
#   Scopes: read, write

# CORS
CORS_ALLOWED_ORIGINS=*

# Database (SQL Server)
# Local example:
# DB_URL=jdbc:sqlserver://localhost:1433;databaseName=vendor;encrypt=true;trustServerCertificate=true
# Azure SQL example:
# DB_URL=jdbc:sqlserver://<server-hostname>:1433;database=<db>;encrypt=true;trustServerCertificate=false;loginTimeout=30
#   - Use the exact server hostname provided by the Azure portal for your cloud (Commercial or Government)
#   - Set hostNameInCertificate to match the certificate wildcard for your cloud if required by your policy
#     e.g., hostNameInCertificate=*.database.windows.net (Commercial)
#           hostNameInCertificate=*.{your-gov-sql-cert-domain} (Azure Government; check portal docs)
DB_URL=
DB_USERNAME=
DB_PASSWORD=
DB_MAX_POOL_SIZE=10

# Azure Government notes (DB connectivity)
# - Always use the FQDN shown in the Azure Government portal for your database server
# - JDBC examples (replace <host> and <db> with your actual values):
#   Azure SQL (Gov):    jdbc:sqlserver://<host>:1433;database=<db>;encrypt=true;trustServerCertificate=false;loginTimeout=30
#   PostgreSQL (Gov):   jdbc:postgresql://<host>:5432/<db>?sslmode=require
#   MySQL (Gov):        jdbc:mysql://<host>:3306/<db>?sslMode=REQUIRED&allowPublicKeyRetrieval=false
